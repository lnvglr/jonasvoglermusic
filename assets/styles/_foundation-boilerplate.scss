@use "sass:math";

@import "./_variables.scss";

@function extract-from-compact( $value, $side ) {
  $index: 1;

  // Top values are always at index 1. The same for when the list has only one item
  @if ( $side == top or length( $value ) == 1 ) {
      $index: 1;
  }
  // Covers "vertical horizontal" style
  @else if ( length( $value ) == 2 ) {
      @if ( $side == left or $side == right ) { $index: 2; }
      @if ( $side == bottom ) { $index: 1; }
  }
  // Covers "top horizontal bottom" style
  @else if ( length( $value ) == 3 ) {
      @if ( $side == left or $side == right ) { $index: 2; }
      @if ( $side == bottom ) { $index: 3; }
  }
  // Covers "top right bottom left" style
  @else if ( length( $value ) == 4 ) {
      @if ( $side == right ) { $index: 2; }
      @if ( $side == bottom ) { $index: 3; }
      @if ( $side == left ) { $index: 4; }
  }

  @return nth( $value, $index );
}


@function map-to-list($map, $keep: 'both') {
  $keep: if(index('keys' 'values', $keep), $keep, 'both');

  @if type-of($map) == 'map' {
    $keys: ();
    $values: ();

    @each $key, $val in $map {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == 'keys' {
      @return $keys;
    }
    @else if $keep == 'values' {
      @return $values;
    }
    @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($map) != 'list', ($value,), $map);

}


$print-breakpoint: large !default;
$-zf-zero-breakpoint: small !default;
$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');

/// Find the next key in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $key - Key to use as a starting point.
///
/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.
@function -zf-map-next($map, $key) {

  // Store the keys of the map as a list
  $values: map-keys($map);

  $i: 0;

  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map
  @if (map-has-key($map, $key)) {
    $i: index($values, $key) + 1;
  }

  // If the key doesn't exist, or it's the last key in the map, return null
  @if ($i > length($map) or $i == 0) {
    @return null;
  }
  // Otherwise, return the value
  @else {
    @return map-get($map, nth($values, $i));
  }

}

/// Find the next number in a map.
/// @access private
///
/// @param {Map} $map - Map to traverse.
/// @param {Mixed} $number - Number to use as a starting point.
///
/// @returns {Mixed} The number following `$number`, if `$number` was found. If `$number` was not found, or `$number` was the biggest number in the map, returns `null`.
@function -zf-map-next-number($map, $number) {

  $next_number: null;

  @each $k, $v in $map {
    @if type-of($v) == 'number' and $v > $number and ($next_number == null or $v < $next_number) {
      $next_number: $v;
    }
  }

  @return $next_number;
}

/// Return a list of our named breakpoints less than $key. Useful for dealing with
/// responsive gutters for the grid.
/// @access private
///
/// @param {String} $key - Key to use as last breakpoint.
///
/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero
@function -zf-breakpoints-less-than($key) {
  $list: ();
  $found_key: false;

  @each $name in $-zf-breakpoints-keys {
    @if ($name == $key) {
      $found_key: true;
    }
    @if not $found_key {
      $list: append($list, $name);
    }
  }
  @return $list;
}
@function strip-unit($num) {
  @return math.div($num, $num * 0 + 1);
}
@function -zf-to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  // Transform em into rem if someone hands over 'em's
  @if unit($value) == 'em' {
    $value: strip-unit($value) * 1rem;
  }

  // Calculate rem if units for $value is not rem or em
  @if unit($value) != 'rem' {
    $value: math.div(strip-unit($value), strip-unit($base)) * 1rem;
  }

  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }

  @return $value;
}

@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: math.div($base, 100%) * 16px;
  }

  // Using rem as base allows correct scaling
  @if unit($base) == 'rem' {
    $base: strip-unit($base) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}
/// Return a list of our named breakpoints less than $key. Useful for dealing with
/// responsive gutters for the grid.
/// @access private
///
/// @param {String} $breakpoint - a named or non-named breakpoint.
///
/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero
@function -zf-closest-named-breakpoint($breakpoint) {
  $last: $-zf-zero-breakpoint;
  $found: false;

  $value: unitless-calc($breakpoint, 1px);
  @each $key, $val in $breakpoints {
    @if not $found {
      @if unitless-calc($val) > $value {
        $found: true;
      } @else {
        $last: $key;
      }
    }
  }

  @return $last;
}

@function zf-str-join(
  $str1: null,
  $str2: null,
  $delimiter: null
) {
  $ret: '';

  @if $str1 and str-length($str1) > 0 {
    $ret: $ret + $str1;

    @if $delimiter and str-length($delimiter) > 0 and $str2 and str-length($str2) > 0 {
      $ret: $ret + $delimiter;
    }
  }
  @if $str2 and str-length($str2) > 0 {
    $ret: $ret + $str2;
  }

  @return $ret;
}
/// Return media query string from the given min and/or max limits.
/// If a limit is equal to `null` or `0`, it is ignored.
/// @access private
///
/// @param {Number} $min [0] - Min media query limit.
/// @param {Number} $max [0] - Max media query limit.
/// @param {String} $min-name ['min-width'] - Name of the min media query limit.
/// @param {String} $delimiter ['max-width'] - Name of the max media query limit.
///
/// @returns {String} Media Query string.
@function -zf-bp-join(
  $min: 0,
  $max: 0,
  $min-name: 'min-width',
  $max-name: 'max-width'
) {
  @return zf-str-join(
    if($min and $min > 0, '(#{$min-name}: #{$min})', null),
    if($max and $max > 0, '(#{$max-name}: #{$max})', null),
    ' and ');
}
// Converts a unitless, pixel, or rem value to em, for use in breakpoints.
@function -zf-bp-to-em($value) {
  // Pixel and unitless values are converted to rems
  @if unit($value) == 'px' or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  // Then the value is converted to ems
  @return strip-unit($value) * 1em;
}
@function breakpoint($val: $-zf-zero-breakpoint) {
  // Web standard Pixels per inch. (1ddpx / $std-web-dpi) = 1dpi
  // See https://www.w3.org/TR/css-values-3/#absolute-lengths
  $std-web-dpi: 96;

  // Size or keyword
  $bp: nth($val, 1);
  // Value of the following breakpoint
  $bp-next: null;
  // Value for max-width media queries
  $bp-min: null;
  // Value for min-width media queries
  $bp-max: null;
  // Direction of media query (up, down, or only)
  $dir: if(length($val) > 1, nth($val, 2), up);
  // If named, name of the breakpoint
  $name: null;
  // If the breakpoint is a HiDPI breakpoint
  $hidpi: false;

  // Orientation media queries have a unique syntax
  @if $bp == 'landscape' or $bp == 'portrait' {
    @return '(orientation: #{$bp})';
  }

  // If a breakpoint name is given, get its value from the $breakpoints/$breakpoints-hidpi map.
  @if type-of($bp) == 'string' {
    @if map-has-key($breakpoints, $bp) {
      $name: $bp;
      $bp: map-get($breakpoints, $name);
      $bp-next: -zf-map-next($breakpoints, $name);
    }
    @else if map-has-key($breakpoints-hidpi, $bp) {
      $name: $bp;
      $bp: map-get($breakpoints-hidpi, $name);
      $bp-next: -zf-map-next-number($breakpoints-hidpi, $bp);
      $hidpi: true;
    }
    @else {
      $bp: 0;
      @warn 'breakpoint(): "#{$val}" is not defined in your `$breakpoints` or `$breakpoints-hidpi` setting.';
    }
  }

  @if not $name and $dir == 'only' {
    @warn 'breakpoint(): Only named media queries can have an `only` range.';
    @return null;
  }

  // Only 'only' and 'up' have a min limit.
  @if $dir == 'only' or $dir == 'up' {
    $bp-min: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));
  }
  // Only 'only' and 'down' have a max limit.
  @if $dir == 'only' or $dir == 'down' {
    // If the breakpoint is a value, use it as max limit.
    @if not $name {
      $bp-max: if($hidpi, strip-unit($bp), -zf-bp-to-em($bp));
    }
    // If the breakpoint is named, the max limit is the following breakpoint - 1px.
    @else if $bp-next {
      // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).
      // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.
      // See https://github.com/foundation/foundation-sites/issues/11313
      $bp-max: if($hidpi, $bp-next - math.div(1, $std-web-dpi), -zf-bp-to-em($bp-next) - 0.00125);
    }
  }

  // Generate the media query string from min and max limits.
  @if $hidpi {
    // Generate values in DPI instead of DPPX for an IE9-11/Opera mini compatibility.
    // See https://caniuse.com/#feat=css-media-resolution
    $bp-min-dpi: if($bp-min, $bp-min * $std-web-dpi * 1dpi, $bp-min);
    $bp-max-dpi: if($bp-max, $bp-max * $std-web-dpi * 1dpi, $bp-max);
    @return zf-str-join(
      -zf-bp-join($bp-min, $bp-max, '-webkit-min-device-pixel-ratio', '-webkit-max-device-pixel-ratio'),
      -zf-bp-join($bp-min-dpi, $bp-max-dpi, 'min-resolution', 'max-resolution'),
      ', ');
  }
  @else {
    @return -zf-bp-join($bp-min, $bp-max);
  }
}

/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:
///  - If a string is passed, the mixin will look for it in the `$breakpoints` and `$breakpoints-hidpi` maps, and use a media query there.
///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.
///  - If a rem value is passed, the unit will be changed to em.
///  - If an em value is passed, the value will be used as-is.
///
/// If multiple values are passed, the mixin will generate a media query for each of them as described above.
/// Since the content is duplicated for each breakpoint, this mixin should only be used with properties that
/// change across breakpoints.
///
/// @param {Keyword|Number} $values... - Breakpoint name or px/rem/em value to process.
///
/// @output If the breakpoint is "0px and larger", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.

@mixin breakpoint($values...) {
  @for $i from 1 through length($values) {
    $value: nth($values, $i);
    $str: breakpoint($value);
    $bp: index($-zf-breakpoints-keys, nth($value, 1));
    $pbp: index($-zf-breakpoints-keys, $print-breakpoint);
    // Direction of media query (up, down, or only)
    $dir: if(length($value) > 1, nth($value, 2), up);

    $old-zf-size: null;

    // Make breakpoint size available as a variable
    @if global-variable-exists(-zf-size) {
      $old-zf-size: $-zf-size;
    }
    $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords

    // If $str is still an empty string, no media query is needed
    @if $str == '' {
      @content;
    }

    // Otherwise, wrap the content in a media query
    @else {
      // For named breakpoints less than or equal to $print-breakpoint, add print to the media types
      // generate print if the breakpoint affects the print-breakpoint (or smaller).
      // This means the current condition only needs to be extended so 'down' always generates print.
      @if $bp != null and ($bp <= $pbp or $dir == down) {
        @media print, screen and #{$str} {
          @content;
        }
      }
      @else {
        @media screen and #{$str} {
          @content;
        }
      }
    }

    $-zf-size: $old-zf-size !global;
  }
}
