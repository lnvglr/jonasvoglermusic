@import "./_variables.scss";
@import "./_gutenberg-styles.scss";

:root {
  --font-family: #{$font-family-sans};
  --blur: blur(20px) saturate(2);
  --stroke: 2px;
  --shadow: 0px 2px 3px rgb(0 0 0 / 20%), 0px 10px 20px rgb(0 0 0 / 50%);
  --primary: #{$primary};
  --button-size-small: 1.5rem;
  --button-size-medium: 2rem;
  --button-size-large: 2.5rem;
  @media screen and (pointer: coarse), (pointer: none) {
    --button-size-small: 2.5rem;
    --button-size-medium: 3rem;
    --button-size-large: 3.5rem;
  }
}
* {
  box-sizing: border-box;
}
html,
body {
  font-family: var(--font-family);
  margin: 0;
  height: 100vh;
  background-color: $light-01;
  color: $black;
  -webkit-text-size-adjust: 100%;
}
audio,
video {
  &:focus {
    outline: none;
  }
}
.wrap {
  position: relative;
  width: map-get($breakpoints, xxlarge);
  max-width: 100%;
  margin: 0 auto;
  @include dynamic-box($axis: vertical);
  @each $breakpoint, $box-size in $dynamic-relation {
    @include breakpoint($breakpoint) {
      padding-left: calc(
        #{env(safe-area-inset-left)} + #{extract-from-compact(
            map-get($padding-sizes, $box-size),
            left
          )}
      );
      padding-right: calc(
        #{env(safe-area-inset-right)} + #{extract-from-compact(
            map-get($padding-sizes, $box-size),
            right
          )}
      );
    }
  }
  &.narrow {
    width: map-get($breakpoints, large);
  }
}
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}
.em-space {
  display: inline-block;
  width: 1em;
}

.dynamic-padding {
  @include dynamic-box();
}
.dynamic-container {
  @include dynamic-box(margin, true, horizontal);
}

figure {
  margin: 0;
}

a {
  text-decoration: none;
  color: inherit;
  &.anchor {
    color: $primary;
    &:hover {
      color: darken($primary, 10);
    }
  }
}
.faint {
  color: $light-03;
}
.clipped {
  position: relative;
  overflow: hidden;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-line-pack: center;
  align-content: center;
  width: 100%;
  height: 100%;
  background: #fafafa;
  background-size: 50px;
  background-repeat: repeat;
  background-position: center;
  padding-bottom: var(--aspect-ratio);
  &.bottom {
    -ms-flex-line-pack: end;
    align-content: flex-end;
    background-position: 50% 100%;
    img,
    iframe,
    figure,
    figure img {
      object-position: 50% 50%;
    }
  }
  &.square {
    height: initial;
    padding-bottom: 100%;
  }
  &.cinema {
    /*
		// padding-bottom: 75%; //4:3, 1:1.33
    // padding-bottom: 56.25%; //16:9, 1:1.78
    // padding-bottom: 31.640625%; // 1:3.16
		*/
    /* //cinemascope, 21:9, 1:2.37 */
    padding-bottom: 41.89%;
    max-height: initial;
    transition: padding-bottom 500ms cubic-bezier(0.2, 0, 0.5, 1);
  }
  &.portrait {
    padding-bottom: 142.856%;
    max-height: 0;
    transition: padding-bottom 500ms cubic-bezier(0.2, 0, 0.5, 1);
  }
  img,
  figure,
  figure img {
    object-fit: cover;
  }
  img,
  iframe,
  figure,
  figure img {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    object-position: 50% 50%;
    transition: $slow-01 $expressive;
    & > * {
      width: 100%;
      height: auto;
    }
  }
}

.page-link {
  line-height: 1.2;
  a:hover,
  .nuxt-link-exact-active {
    color: var(--primary);
    color: $primary;
  }
}

.hide-medium-down {
  @media screen and (max-width: map-get($breakpoints, large)) {
    display: none !important;
  }
}
.hide-large {
  @media screen and (min-width: map-get($breakpoints, large)) {
    display: none !important;
  }
}

.project-content {
  .alignfull,
  .alignwide {
    box-sizing: border-box;
    @include dynamic-box(margin, true, horizontal);
    img {
      height: auto;
    }
  }
  .alignfull {
    width: map-get($breakpoints, xxlarge);
    @include dynamic-box(margin, $axis: vertical);
    @media screen and (min-width: map-get($breakpoints, xxlarge)) {
      margin: 0 calc(-#{map-get($breakpoints, xxlarge)} / 2 + 50%);
      max-width: initial;
    }
    @media screen and (max-width: map-get($breakpoints, xxlarge) - 1px) {
      margin: 0 calc(-50vw + 50%);
      max-width: 100vw;
    }
  }
  .wp-block-embed {
    iframe {
      height: auto;
    }
  }
  .wp-block-columns {
    margin: -0.5rem;
    .wp-block-column {
      margin: 0.5rem;
      p {
        &:first-child {
          margin-top: 0;
        }
      }
    }
  }
  .blocks-gallery-grid {
    width: 100%;
  }
}
.flex {
  display: flex !important;
}
.flex-wrap {
  flex-wrap: wrap !important;
}
.flex-grow {
  flex-grow: 1 !important;
}
.flex-columns {
  & > * {
    flex-grow: 1;
    text-align: center;
    padding: 0 map-get($padding-sizes, medium);
  }
}

.spinner {
  --size: 2.5rem;
  --speed: #{$extraslow-01};
  border: 2px solid rgba(#000000, 0.25);
  border-radius: 50%;
  border-top: 2px solid currentColor;
  animation: spin var(--speed) infinite cubic-bezier(0.9, 0.3, 0.3, 0.7);
  width: var(--size);
  height: var(--size);
  will-change: transform;
  &.small {
    --size: 1.5rem;
  }
  &.large {
    --size: 4rem;
  }
  &.quick {
    --speed: #{$slow-02};
  }
  &.slow {
    --speed: #{$extraslow-02};
  }
}
@keyframes spin {
  0% {
    transform: rotate(-20deg);
  }
  100% {
    transform: rotate(340deg);
  }
}

.spinner-container {
  z-index: 100;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  width: 100%;
  top: 0;
  background: rgba(#000000, 0.5);
}

.pulse {
  animation: pulse $extraslow-02 infinite;
}
@keyframes pulse {
  0% {
    opacity: 0.5;
  }
  70% {
    opacity: 1;
  }
  100% {
    opacity: 0.5;
  }
}
@keyframes pulse-background {
  0% {
    background: rgba(var(--background-color, #{$light-02}), 0.5);
  }
  70% {
    background: rgba(var(--background-color, #{$light-02}), 1);
  }
  100% {
    background: rgba(var(--background-color, #{$light-02}), 0.5);
  }
}
