
@import "./_foundation-boilerplate.scss";

$dynamic-relation: (
  small: large,
  medium: xlarge,
  large: xxlarge,
);


@function multiply-list($list, $multiplier) {
  $new-list: ();
  @each $item in $list {
    $new-list: join($new-list, ($item * $multiplier));
  }
  @return $new-list;
}
/// Computes a dynamic padding box.
///
/// @param {string} $box
///   Padding or Margin.
/// @param {boolean} $negative
///   If negative or not.
/// @return {string} $axis
///   both, vertical or horizontal.

@mixin dynamic-box( $box: padding, $negative: false, $axis: both ) {
  $multiplier: if($negative, -1, 1);
  @each $breakpoint, $box-size in $dynamic-relation {
    @include breakpoint($breakpoint) {
      @if $axis == both {
        #{$box}: multiply-list(map-get($padding-sizes, $box-size), $multiplier);
      }
      @else if $axis == vertical {
        #{$box}-top: multiply-list(extract-from-compact(map-get($padding-sizes, $box-size), top), $multiplier);
        #{$box}-bottom: multiply-list(extract-from-compact(map-get($padding-sizes, $box-size), bottom), $multiplier);
      }
      @else if $axis == horizontal {
        #{$box}-left: multiply-list(extract-from-compact(map-get($padding-sizes, $box-size), left), $multiplier);
        #{$box}-right: multiply-list(extract-from-compact(map-get($padding-sizes, $box-size), right), $multiplier);
        @if $negative {
          max-width: calc(100% + (#{extract-from-compact(map-get($padding-sizes, $box-size), left)} * 2));
          width: calc(100% + (#{extract-from-compact(map-get($padding-sizes, $box-size), left)} * 2));
        }
      }
    }
  }
}
